#!/usr/bin/env python3

import argparse
import datetime
import json
import logging
import os
import pathlib
import subprocess
import sys
import tempfile

EPILOG_STR = """
Examples:

   $ {script} -c ./dev-private/config/bluesky-aws/emissions.json

   $ {script} -c ./dev-private/config/bluesky-aws/emissions.json -d 2019-12-03

   $ {script} -c ./dev-private/config/bluesky-aws/emissions.json \\
      -i ./dev/data/1-fire.json --instance bluesky-v4.1.31-test

   $ {script} -c ./dev-private/config/bluesky-aws/emissions.json \\
      -n 3 -d 2019-12-03  --instance bluesky-v4.1.31-test

 """.format(script=sys.argv[0])

DEFAULT_LAT = 37.909644
DEFAULT_LNG = -119.7615805

def parse_args():
    parser = argparse.ArgumentParser()
    parser.formatter_class = argparse.RawTextHelpFormatter
    parser.add_argument('-c', '--config-file', required=True,
        help="bluesky-aws config file")
    parser.add_argument('-i', '--input-file', help="input data file")
    parser.add_argument('-d', help=("date used to generate input data, "
        "if file isn't specified; e.g. '2019-12-01"))
    parser.add_argument('-n', default=1, type=int,
        help="number of fires, if generating input data; default 1")
    parser.add_argument('--instance', help="Existing ec2 instance")
    parser.add_argument('--lat', type=float, default=DEFAULT_LAT,
        help=("latitude to place fires if generating input data; "
            "default {}".format(DEFAULT_LAT)))
    parser.add_argument('--lng', type=float, default=DEFAULT_LNG,
        help=("longitude to place fires if generating input data; "
            "default {}".format(DEFAULT_LNG)))
    parser.add_argument('--local-afaws',
        help=("local afaws package source code to mount in docker container"
            "e.g. /home/foo/pnwairfire-afaws/afaws/"))
    parser.add_argument('-C', action='append', default=[])
    parser.add_argument('-B', action='append', default=[])
    parser.add_argument('-I', action='append', default=[])
    parser.add_argument('-F', action='append', default=[])
    parser.add_argument('-J', action='append', default=[])

    parser.epilog = EPILOG_STR
    return parser.parse_args()


class get_input_file(object):

    def __init__(self, args_object):
        if args_object.input_file:
            self._input_file_name = os.path.abspath(args_object.input_file)

        else:
            self._id = 'run-script-{}-fire{}'.format(args_object.n,
                's' if args_object.n > 1 else '')
            # save to object so that it doesn't get deleted until after exit
            self._tmpdir = tempfile.mkdtemp()
            self._input_file_name = os.path.join(
                self._tmpdir, self._id)
            with open (self._input_file_name, 'w') as f:
                data = self._generate_data(args_object)
                f.write(json.dumps(data))

    def __enter__(self):
        return self._input_file_name

    def __exit__(self, exc_type, exc_value, traceback):
        pass

    def _generate_data(self, args_object):
        start = (datetime.datetime.strptime(args_object.d, '%Y-%m-%d')
            if args_object.d else datetime.datetime.utcnow())
        end = start + datetime.timedelta(days=2)
        data = {"fires": []}

        for n in range(args_object.n):
            data['fires'].append({
                "id": '{}-{}'.format(self._id, n),
                "type": "rx",
                "activity": [
                    {
                        "active_areas": [
                            {
                                "start": start.strftime("%Y-%m-%dT00:00:00"),
                                "end": end.strftime("%Y-%m-%dT00:00:00"),
                                "ignition_start": start.strftime("%Y-%m-%dT08:00:00"),
                                "ignition_end": start.strftime("%Y-%m-%dT14:00:00"),
                                "utc_offset": "-07:00",
                                "ecoregion": "western",
                                "country": "USA",
                                "state": "CA",
                                "specified_points": [
                                    {
                                        "lat": args_object.lat + n * 0.01,
                                        "lng": args_object.lng - n * 0.01,
                                        "area": 1000
                                    }
                                ]
                            }
                        ]
                    }
                ]
            })

        return data

def get_command(input_file, args):
    cwd = os.getcwd()
    home = str(pathlib.Path.home())
    cmd = [
        "docker", "run", "--rm", "-ti", "--user", "blueskyaws",
        "-v", "{}/:/bluesky-aws/".format(cwd),
        "-v", "{}/.aws/:/home/blueskyaws/.aws/".format(cwd),
        "-v", "{}/.ssh:/home/blueskyaws/.ssh".format(home),
        "-v", "{d}:{d}".format(d=os.path.dirname(input_file))
    ]
    if args.local_afaws:
        cmd.extend(['-v', '{}:/bluesky-aws/afaws/'.format(args.local_afaws)])

    cmd.extend([
        "bluesky-aws",
        "./bin/run-bluesky",
        "--log-level", "INFO",
        "-i", input_file,
        "-c", args.config_file
    ])

    if args.instance:
        cmd.extend(['--instance', args.instance])

    for v in args.C:
        cmd.extend(['-C', v])
    for v in args.B:
        cmd.extend(['-B', v])
    for v in args.I:
        cmd.extend(['-I', v])
    for v in args.F:
        cmd.extend(['-F', v])
    for v in args.J:
        cmd.extend(['-J', v])

    return cmd

def main():
    args = parse_args()
    logging.basicConfig(level=logging.INFO,
        format='%(asctime)s %(levelname)s: %(message)s')
    with get_input_file(args) as input_file:
        cmd = get_command(input_file, args)
        logging.info("Running %s", ' '.join(cmd))
        subprocess.run(cmd)

if __name__ == "__main__":
    main()
